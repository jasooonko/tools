#!/usr/bin/env ruby

require 'optparse'
require_relative 'lib/rss'

FEEDS = {   most_recent:    'http://s31.dlnws.com/dealnews/rss/todays-edition.xml',
            most_popular:   'http://s31.dlnws.com/dealnews/rss/popular.xml',
            editor_choice:  'http://s31.dlnws.com/dealnews/rss/editors-choice.xml',
            techbargains:   'http://www.techbargains.com/rss.xml',
            slickdeals:     'http://feeds.feedburner.com/SlickdealsnetForums-9?format=xml',
            fatwallet:      'http://feeds.feedburner.com/FatwalletHotDeals?format=xml',
        }
DEFAULT_FEEDS = [FEEDS[:most_popular], FEEDS[:techbargains]]
CONFIG_FILE = "#{ENV["HOME"]}/.config/dealnews.conf"


    params = {}
    opt_parser = OptionParser.new do |opt|
        opt.banner = "Usage:"
        opt.separator "     dealnews -s <rss selection> -t <minutes> -t"
        opt.separator  "Parameters"

    opt.on("-s","--selection <rss>","most_recent, editor_choice or default: most_popular") do |value|
        params[:rss] = value
    end

    opt.on("-t","--time <minute>",Integer, "display feed for the last n minutes") do |value|
        params[:time] = value
    end
    opt.on("-u","--url <show>", "display url") do |value|
        params[:url] = value
    end

    opt.on("-h","--help","help") do
        puts opt_parser
        exit 1
    end
    end
    opt_parser.parse!
    if(params.has_key?(:rss) && FEEDS.has_key?(params[:rss].to_sym))
        params[:rss] = [feed[params[:rss].to_sym]]
    else # default feed
        params[:rss] = DEFAULT_FEEDS
    end

rss = Rss.new(FEEDS, params, CONFIG_FILE)
rss.read
